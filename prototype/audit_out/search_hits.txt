prototype/stocking-prototype.html-38-  <link rel="stylesheet" href="/css/ui.css?v=2024-09-15" />
prototype/stocking-prototype.html-39-  <link rel="stylesheet" href="/prototype/css/stocking-prototype.css" />
prototype/stocking-prototype.html-40-  <link rel="stylesheet" href="/prototype/assets/css/proto-popovers.css?v=proto_rm_2025_10_25" />
prototype/stocking-prototype.html:41:  <link rel="stylesheet" href="/prototype/assets/css/filtration.css?v=proto_rm_2025_10_25" />
prototype/stocking-prototype.html-42-  <link rel="stylesheet" href="/prototype/assets/css/prototype.css?v=proto_rm_2025_10_25" />
prototype/stocking-prototype.html-43-  <style>
prototype/stocking-prototype.html-44-    /* PROTOTYPE ONLY ‚Äî block any lingering legacy UI from appearing */
prototype/stocking-prototype.html:45:    .filtration-card,
prototype/stocking-prototype.html:46:    .filtration-summary,
prototype/stocking-prototype.html-47-    .filter-setup-legacy,
prototype/stocking-prototype.html-48-    .filter-rows,
prototype/stocking-prototype.html-49-    .filter-row,
prototype/stocking-prototype.html-50-    .add-another-filter,
prototype/stocking-prototype.html-51-    .total-flow,
prototype/stocking-prototype.html:52:    .turnover,
prototype/stocking-prototype.html:53:    #filtration-summary,
prototype/stocking-prototype.html:54:    [data-card="filtration-summary"],
prototype/stocking-prototype.html:55:    #filtration-trigger {
prototype/stocking-prototype.html-56-      display: none !important;
prototype/stocking-prototype.html-57-    }
prototype/stocking-prototype.html-58-  </style>
--
prototype/stocking-prototype.html-85-        "url": "https://thetankguide.com/prototype/stocking-prototype.html",
prototype/stocking-prototype.html-86-        "applicationCategory": "LifestyleApplication",
prototype/stocking-prototype.html-87-        "operatingSystem": "Web",
prototype/stocking-prototype.html:88:        "description": "Prototype environment for The Tank Guide Stocking Advisor, providing aquarium stocking suggestions, bioload guidance, and parameter targets.",
prototype/stocking-prototype.html-89-        "image": "https://thetankguide.com/assets/og/stocking-advisor-og.png",
prototype/stocking-prototype.html-90-        "author": {
prototype/stocking-prototype.html-91-          "@id": "https://thetankguide.com/#organization"
--
prototype/stocking-prototype.html-123-            "name": "How accurate are the tank size recommendations?",
prototype/stocking-prototype.html-124-            "acceptedAnswer": {
prototype/stocking-prototype.html-125-              "@type": "Answer",
prototype/stocking-prototype.html:126:              "text": "The advisor uses a balanced approach that considers species behavior, activity level, and planted-tank benefits. It avoids rigid ‚Äúrules‚Äù and instead provides conservative starting points so aquarists can fine-tune their stocking levels through regular testing and observation."
prototype/stocking-prototype.html-127-            }
prototype/stocking-prototype.html-128-          },
prototype/stocking-prototype.html-129-          {
--
prototype/stocking-prototype.html-150-  }
prototype/stocking-prototype.html-151-  </script>
prototype/stocking-prototype.html-152-  <script defer src="/js/nav.js?v=1.1.0"></script>
prototype/stocking-prototype.html:153:  <script defer src="/prototype/assets/js/filtration.js?v=proto_rm_2025_10_25"></script>
prototype/stocking-prototype.html:154:  <!-- proto guard: ensure legacy filtration card stays removed -->
prototype/stocking-prototype.html-155-  <script src="/prototype/assets/js/proto-guards.js?v=proto_rm_2025_10_25" defer></script>
prototype/stocking-prototype.html-156-  <style>
prototype/stocking-prototype.html-157-    :root {
--
prototype/stocking-prototype.html-221-      will-change: opacity;
prototype/stocking-prototype.html-222-    }
prototype/stocking-prototype.html-223-
prototype/stocking-prototype.html:224:    .stocking-page.is-planted::before {
prototype/stocking-prototype.html-225-      opacity: 1;
prototype/stocking-prototype.html-226-    }
prototype/stocking-prototype.html-227-
prototype/stocking-prototype.html:228:    .stocking-page.is-planted .tank-size-card {
prototype/stocking-prototype.html-229-      border-color: var(--sa-plant-border);
prototype/stocking-prototype.html-230-      box-shadow: var(--sa-plant-glow);
prototype/stocking-prototype.html-231-    }
--
prototype/stocking-prototype.html-320-    }
prototype/stocking-prototype.html-321-
prototype/stocking-prototype.html-322-    .field-label-row .info-btn,
prototype/stocking-prototype.html:323:    .filter-turnover-label .info-btn {
prototype/stocking-prototype.html-324-      --info-btn-visible: 30px;
prototype/stocking-prototype.html-325-      --info-btn-hit: 44px;
prototype/stocking-prototype.html-326-      font-size: 0.95rem;
prototype/stocking-prototype.html-327-      transform: none;
prototype/stocking-prototype.html-328-    }
prototype/stocking-prototype.html-329-
prototype/stocking-prototype.html:330:    .filter-turnover {
prototype/stocking-prototype.html-331-      display: flex;
prototype/stocking-prototype.html-332-      flex-wrap: wrap;
prototype/stocking-prototype.html-333-      gap: 6px;
prototype/stocking-prototype.html-334-      align-items: baseline;
prototype/stocking-prototype.html-335-    }
prototype/stocking-prototype.html-336-
prototype/stocking-prototype.html:337:    .filter-turnover-label {
prototype/stocking-prototype.html-338-      display: inline-flex;
prototype/stocking-prototype.html-339-      align-items: center;
prototype/stocking-prototype.html-340-      gap: 6px;
prototype/stocking-prototype.html-341-      font-weight: 600;
prototype/stocking-prototype.html-342-    }
prototype/stocking-prototype.html-343-
prototype/stocking-prototype.html:344:    .filter-turnover-value {
prototype/stocking-prototype.html-345-      font-variant-numeric: tabular-nums;
prototype/stocking-prototype.html-346-    }
prototype/stocking-prototype.html-347-
--
prototype/stocking-prototype.html-1024-      margin-bottom: 0;
prototype/stocking-prototype.html-1025-    }
prototype/stocking-prototype.html-1026-
prototype/stocking-prototype.html:1027:    /* ----- Compact Bioload/Aggression card adjustments ----- */
prototype/stocking-prototype.html-1028-    #stocking-page #bioagg-card {
prototype/stocking-prototype.html-1029-      min-height: 0 !important;
prototype/stocking-prototype.html-1030-      height: auto !important;
--
prototype/stocking-prototype.html-1140-            Stocking Advisor <span id="plant-icon" aria-hidden="true">üå±</span>
prototype/stocking-prototype.html-1141-          </h1>
prototype/stocking-prototype.html-1142-          <p class="hero-subline">Prepared by The Tank Guide (A FishKeepingLifeCo Project).</p>
prototype/stocking-prototype.html:1143:          <p class="tagline hero-tagline lead">Plan a healthy community by checking bioload, compatibility ‚Äî and get recommended water parameters for your tank.</p>
prototype/stocking-prototype.html-1144-          <!-- Inline "How it works" link (prototype only) -->
prototype/stocking-prototype.html-1145-          <div class="muted small info-inline" id="how-it-works-inline-wrap">
prototype/stocking-prototype.html-1146-            <a href="#" id="hero-how-works" class="hero-how-works link-underline">How it works</a>
--
prototype/stocking-prototype.html-1230-          <!-- Facts line stays; starts EMPTY to avoid duplicate helper text -->
prototype/stocking-prototype.html-1231-          <div class="facts-line muted-text" data-role="tank-spec" aria-live="polite"></div>
prototype/stocking-prototype.html-1232-
prototype/stocking-prototype.html:1233:        <!-- Planted (stacked) -->
prototype/stocking-prototype.html-1234-        <div class="row toggle-row">
prototype/stocking-prototype.html-1235-          <div class="row-left">
prototype/stocking-prototype.html-1236-            <div class="toggle-label">
prototype/stocking-prototype.html:1237:              <label class="toggle-title" for="stocking-planted">Planted</label>
prototype/stocking-prototype.html:1238:              <div class="info-trigger" data-info-scope="planted">
prototype/stocking-prototype.html-1239-                <button
prototype/stocking-prototype.html-1240-                  type="button"
prototype/stocking-prototype.html-1241-                  class="proto-info-trigger info-btn"
prototype/stocking-prototype.html-1242-                  aria-haspopup="dialog"
prototype/stocking-prototype.html:1243:                  aria-controls="pop-planted"
prototype/stocking-prototype.html-1244-                  aria-expanded="false"
prototype/stocking-prototype.html:1245:                  aria-label="More info about planted tanks"
prototype/stocking-prototype.html:1246:                  data-proto-popover="pop-planted"
prototype/stocking-prototype.html-1247-                >i</button>
prototype/stocking-prototype.html:1248:                <div id="pop-planted" class="proto-popover" role="dialog" aria-labelledby="pop-planted-title" tabindex="-1" hidden>
prototype/stocking-prototype.html-1249-                  <header>
prototype/stocking-prototype.html:1250:                    <h3 id="pop-planted-title">When to mark the tank planted</h3>
prototype/stocking-prototype.html-1251-                    <button type="button" data-close aria-label="Close">√ó</button>
prototype/stocking-prototype.html-1252-                  </header>
prototype/stocking-prototype.html:1253:                  <div role="document" aria-labelledby="pop-planted-title">
prototype/stocking-prototype.html-1254-                    <ul>
prototype/stocking-prototype.html-1255-                      <li>Toggle this on when you have actively growing live plants you prune and fertilize regularly.</li>
prototype/stocking-prototype.html:1256:                      <li>Planted mode gives a modest stocking buffer because thriving plants absorb ammonia and nitrate.</li>
prototype/stocking-prototype.html-1257-                      <li>Leave it off for artificial plants or sparse growth so recommendations stay conservative.</li>
prototype/stocking-prototype.html-1258-                    </ul>
prototype/stocking-prototype.html-1259-                  </div>
--
prototype/stocking-prototype.html-1262-            </div>
prototype/stocking-prototype.html-1263-          </div>
prototype/stocking-prototype.html-1264-          <div class="row-right">
prototype/stocking-prototype.html:1265:            <div class="planted-row" id="planted-control">
prototype/stocking-prototype.html:1266:              <label class="planted-checkbox">
prototype/stocking-prototype.html:1267:                <input type="checkbox" id="stocking-planted" name="stocking-planted" data-testid="toggle-planted" />
prototype/stocking-prototype.html-1268-                <span class="checkmark" aria-hidden="true"></span>
prototype/stocking-prototype.html:1269:                This is a planted tank.
prototype/stocking-prototype.html-1270-              </label>
prototype/stocking-prototype.html-1271-            </div>
prototype/stocking-prototype.html-1272-            <div class="filter-flow-control" data-role="filter-setup">
--
prototype/stocking-prototype.html-1291-                      <div role="document" aria-labelledby="pop-filter-product-title">
prototype/stocking-prototype.html-1292-                        <ul>
prototype/stocking-prototype.html-1293-                          <li>Select a model rated for your tank volume or one size larger for heavy stocking plans.</li>
prototype/stocking-prototype.html:1294:                          <li>Choosing a product fills in its rated gallons-per-hour so turnover math stays accurate.</li>
prototype/stocking-prototype.html-1295-                          <li>Switch to a custom entry if you run multiple filters or throttle the manufacturer flow.</li>
prototype/stocking-prototype.html-1296-                        </ul>
prototype/stocking-prototype.html-1297-                      </div>
--
prototype/stocking-prototype.html-1349-                  aria-live="polite"
prototype/stocking-prototype.html-1350-                ></div>
prototype/stocking-prototype.html-1351-                <p class="proto-filter-empty" data-role="proto-filter-empty">No filters added yet.</p>
prototype/stocking-prototype.html:1352:                <div class="filter-turnover turnover-block" id="filter-turnover" aria-live="polite">
prototype/stocking-prototype.html-1353-                  <div class="field-label-row">
prototype/stocking-prototype.html:1354:                    <label class="field-label" for="turnoverValue">Estimated turnover</label>
prototype/stocking-prototype.html:1355:                    <div class="info-trigger" data-info-scope="turnover">
prototype/stocking-prototype.html-1356-                      <button
prototype/stocking-prototype.html-1357-                        type="button"
prototype/stocking-prototype.html-1358-                        class="proto-info-trigger info-btn field-label-info"
prototype/stocking-prototype.html-1359-                        aria-haspopup="dialog"
prototype/stocking-prototype.html:1360:                        aria-controls="pop-turnover"
prototype/stocking-prototype.html-1361-                        aria-expanded="false"
prototype/stocking-prototype.html:1362:                        aria-label="More info about turnover"
prototype/stocking-prototype.html:1363:                        data-proto-popover="pop-turnover"
prototype/stocking-prototype.html-1364-                      >i</button>
prototype/stocking-prototype.html:1365:                      <div id="pop-turnover" class="proto-popover" role="dialog" aria-labelledby="pop-turnover-title" tabindex="-1" hidden>
prototype/stocking-prototype.html-1366-                        <header>
prototype/stocking-prototype.html:1367:                          <h3 id="pop-turnover-title">Turnover targets</h3>
prototype/stocking-prototype.html-1368-                          <button type="button" data-close aria-label="Close">√ó</button>
prototype/stocking-prototype.html-1369-                        </header>
prototype/stocking-prototype.html:1370:                        <div role="document" aria-labelledby="pop-turnover-title">
prototype/stocking-prototype.html-1371-                          <ul>
prototype/stocking-prototype.html:1372:                            <li>Turnover compares your filter flow to the aquarium volume (GPH √∑ gallons).</li>
prototype/stocking-prototype.html-1373-                            <li>General community tanks thrive around 5‚Äì7√ó per hour; active species often prefer 8√ó or more.</li>
prototype/stocking-prototype.html:1374:                            <li>If the number dips low, consider upsizing filtration or adding supplemental circulation.</li>
prototype/stocking-prototype.html-1375-                          </ul>
prototype/stocking-prototype.html-1376-                        </div>
prototype/stocking-prototype.html-1377-                      </div>
prototype/stocking-prototype.html-1378-                    </div>
prototype/stocking-prototype.html-1379-                  </div>
prototype/stocking-prototype.html:1380:                  <p class="proto-filter-summary" data-role="proto-filter-summary">Filtration: 0 GPH ‚Ä¢ 0.0√ó/h</p>
prototype/stocking-prototype.html:1381:                  <span class="filter-turnover-value" data-role="filter-turnover-value" aria-hidden="true" hidden>‚Äî</span>
prototype/stocking-prototype.html-1382-                  <!-- Mirrors .filter-flow-input__field > input styling from Rated flow (GPH) field -->
prototype/stocking-prototype.html:1383:                  <!-- PROTOTYPE-ONLY: Compact turnover field -->
prototype/stocking-prototype.html:1384:                  <div class="proto-input-group proto-turnover">
prototype/stocking-prototype.html-1385-                    <input
prototype/stocking-prototype.html:1386:                      id="turnoverValue"
prototype/stocking-prototype.html-1387-                      class="proto-input proto-input--compact"
prototype/stocking-prototype.html-1388-                      type="text"
prototype/stocking-prototype.html-1389-                      inputmode="decimal"
prototype/stocking-prototype.html:1390:                      aria-label="Estimated turnover in tank volumes per hour"
prototype/stocking-prototype.html-1391-                      value="5.0"
prototype/stocking-prototype.html-1392-                      placeholder="‚Äî"
prototype/stocking-prototype.html-1393-                      readonly
--
prototype/stocking-prototype.html-1467-          margin-top: 14px;
prototype/stocking-prototype.html-1468-        }
prototype/stocking-prototype.html-1469-
prototype/stocking-prototype.html:1470:        /* Planted checkbox matches Cycling Coach styling */
prototype/stocking-prototype.html:1471:        #stocking-page .planted-row {
prototype/stocking-prototype.html-1472-          display: flex;
prototype/stocking-prototype.html-1473-          align-items: center;
prototype/stocking-prototype.html-1474-          gap: 10px;
prototype/stocking-prototype.html-1475-          margin: 8px 0 16px;
prototype/stocking-prototype.html-1476-        }
prototype/stocking-prototype.html:1477:        #stocking-page .planted-checkbox {
prototype/stocking-prototype.html-1478-          display: inline-flex;
prototype/stocking-prototype.html-1479-          align-items: center;
prototype/stocking-prototype.html-1480-          gap: 6px;
--
prototype/stocking-prototype.html-1483-          cursor: pointer;
prototype/stocking-prototype.html-1484-          user-select: none;
prototype/stocking-prototype.html-1485-        }
prototype/stocking-prototype.html:1486:        #stocking-page .planted-checkbox input[type="checkbox"] {
prototype/stocking-prototype.html-1487-          appearance: none;
prototype/stocking-prototype.html-1488-          -webkit-appearance: none;
prototype/stocking-prototype.html-1489-          background-color: transparent;
--
prototype/stocking-prototype.html-1498-          cursor: pointer;
prototype/stocking-prototype.html-1499-          transition: border 0.2s ease, background 0.2s ease;
prototype/stocking-prototype.html-1500-        }
prototype/stocking-prototype.html:1501:        #stocking-page .planted-checkbox input[type="checkbox"]::before {
prototype/stocking-prototype.html-1502-          content: "\‚úì";
prototype/stocking-prototype.html-1503-          font-size: 14px;
prototype/stocking-prototype.html-1504-          color: #fff;
prototype/stocking-prototype.html-1505-          transform: scale(0);
prototype/stocking-prototype.html-1506-          transition: transform 0.15s ease;
prototype/stocking-prototype.html-1507-        }
prototype/stocking-prototype.html:1508:        #stocking-page .planted-checkbox input[type="checkbox"]:checked {
prototype/stocking-prototype.html-1509-          background-color: rgba(255, 255, 255, 0.15);
prototype/stocking-prototype.html-1510-          border-color: rgba(255, 255, 255, 0.6);
prototype/stocking-prototype.html-1511-        }
prototype/stocking-prototype.html:1512:        #stocking-page .planted-checkbox input[type="checkbox"]:checked::before {
prototype/stocking-prototype.html-1513-          transform: scale(1);
prototype/stocking-prototype.html-1514-        }
prototype/stocking-prototype.html:1515:        #stocking-page .planted-checkbox:hover input[type="checkbox"] {
prototype/stocking-prototype.html-1516-          border-color: rgba(255, 255, 255, 0.6);
prototype/stocking-prototype.html-1517-        }
prototype/stocking-prototype.html:1518:        #stocking-page .planted-checkbox input[type="checkbox"]:focus-visible {
prototype/stocking-prototype.html-1519-          outline: 2px solid rgba(255, 255, 255, 0.5);
prototype/stocking-prototype.html-1520-          outline-offset: 2px;
prototype/stocking-prototype.html-1521-        }
prototype/stocking-prototype.html:1522:        #stocking-page .planted-checkbox .checkmark {
prototype/stocking-prototype.html-1523-          display: none;
prototype/stocking-prototype.html-1524-        }
prototype/stocking-prototype.html-1525-
--
prototype/stocking-prototype.html-1626-                      <li>Verify your nitrogen cycle is stable with zero ammonia and nitrite before introducing new species.</li>
prototype/stocking-prototype.html-1627-                      <li>Match species by temperature, pH, and hardness tolerances, leaning into the overlapping sweet spot.</li>
prototype/stocking-prototype.html-1628-                      <li>Stage livestock additions over several weeks so the biofilter can adjust without stress spikes.</li>
prototype/stocking-prototype.html:1629:                      <li>Use live plants or seeded media to buffer bioload swings as you expand the community.</li>
prototype/stocking-prototype.html-1630-                      <li>Keep a quick log of maintenance, feedings, and behavior shifts so you can course-correct early.</li>
prototype/stocking-prototype.html-1631-                    </ul>
prototype/stocking-prototype.html-1632-                  </div>
--
prototype/stocking-prototype.html-1684-          <hr class="env-divider" aria-hidden="true" />
prototype/stocking-prototype.html-1685-
prototype/stocking-prototype.html-1686-          <div id="env-bars" class="env-bars" data-testid="stock-bars">
prototype/stocking-prototype.html:1687:            <!-- populated by JS: Bioload Capacity + Aggression & Compatibility -->
prototype/stocking-prototype.html-1688-          </div>
prototype/stocking-prototype.html-1689-
prototype/stocking-prototype.html-1690-          <div id="env-more-tips" class="env-more-tips env-tips" data-role="env-legend" hidden>
--
prototype/stocking-prototype.html-1745-
prototype/stocking-prototype.html-1746-      <section id="post-results-explainer" class="ttg-explainer--bg">
prototype/stocking-prototype.html-1747-        <h2>Plan Your Aquarium with Confidence</h2>
prototype/stocking-prototype.html:1748:        <p>The Stocking Advisor helps you build a calm, healthy tank. It uses real-world stocking data and hobby feedback to show you‚Äîat a glance‚Äîhow your choices affect bioload, filtration needs, and species mix. No spreadsheets. No guesswork.</p>
prototype/stocking-prototype.html-1749-
prototype/stocking-prototype.html-1750-        <h2>The Science Behind the Recommendations</h2>
prototype/stocking-prototype.html-1751-
prototype/stocking-prototype.html:1752:        <h3>Bioload, not ‚Äúinches per gallon‚Äù</h3>
prototype/stocking-prototype.html:1753:        <p>The Advisor estimates bioload‚Äîhow much waste your stock produces‚Äîusing conservative rules plus activity multipliers. Fast swimmers (like danios) add more load than slow cruisers (like gouramis). A planted tank gives a small buffer because thriving plants take up nitrogen.</p>
prototype/stocking-prototype.html-1754-
prototype/stocking-prototype.html-1755-        <h3>Water chemistry guardrails</h3>
prototype/stocking-prototype.html-1756-        <p>Each species carries preferred ranges for temperature, pH, and hardness. If your plan mixes fish outside a shared range, the Environmental card highlights it so you can adjust stock, remineralize, or tweak heat and flow.</p>
--
prototype/stocking-prototype.html-1774-        <h2>Stocking Advisor FAQ</h2>
prototype/stocking-prototype.html-1775-        <details>
prototype/stocking-prototype.html-1776-          <summary>How accurate are the tank size recommendations?</summary>
prototype/stocking-prototype.html:1777:          <p>The advisor uses a balanced approach that considers species behavior, activity level, and planted-tank benefits. It avoids rigid ‚Äúrules‚Äù and instead provides conservative starting points so aquarists can fine-tune their stocking levels through regular testing and observation.</p>
prototype/stocking-prototype.html-1778-        </details>
prototype/stocking-prototype.html-1779-        <details>
prototype/stocking-prototype.html-1780-          <summary>What water parameters does the Stocking Advisor monitor?</summary>
--
prototype/stocking-prototype.html-1790-
prototype/stocking-prototype.html-1791-    <section class="seo-intro">
prototype/stocking-prototype.html-1792-      <div class="wrap">
prototype/stocking-prototype.html:1793:        <p>The Tank Guide Stocking Advisor calculates aquarium bioload and compatibility. Plan balanced communities of bettas, tetras, shrimp, and more, powered by FishKeepingLifeCo.</p>
prototype/stocking-prototype.html-1794-      </div>
prototype/stocking-prototype.html-1795-    </section>
prototype/stocking-prototype.html-1796-  </main>
--
prototype/stocking-prototype.html-1809-  <script type="module" src="/js/logic/conflicts.js"></script>
prototype/stocking-prototype.html-1810-  <script type="module" src="/js/stocking.js?v=2024-09-01" id="js-stocking"></script>
prototype/stocking-prototype.html-1811-  <script type="module" src="/js/tank-size-card.js?v=2024-09-01"></script>
prototype/stocking-prototype.html:1812:  <script type="module" src="/prototype/js/proto-filtration.js"></script>
prototype/stocking-prototype.html-1813-
prototype/stocking-prototype.html-1814-  <!-- How it works modal (prototype only) -->
prototype/stocking-prototype.html-1815-  <div id="how-modal" class="modal-backdrop hidden" aria-hidden="true">
--
prototype/stocking-prototype.html-1818-      <h3 id="how-modal-title">How the Stocking Advisor works</h3>
prototype/stocking-prototype.html-1819-      <ol class="spaced">
prototype/stocking-prototype.html-1820-        <li><strong>Pick your tank size.</strong> Enter a volume or choose a preset ‚Äî stocking levels update right away.</li>
prototype/stocking-prototype.html:1821:        <li><strong>Toggle planted mode.</strong> Plants give a small buffer and you‚Äôll see the UI reflect the change.</li>
prototype/stocking-prototype.html-1822-        <li><strong>Select your filter.</strong> Choose a model to auto-fill flow; adjust GPH if you‚Äôve modded your setup.</li>
prototype/stocking-prototype.html-1823-        <li><strong>Add your fish.</strong> Search and add species. Reorder or remove as you plan. Chips flag conflicts.</li>
prototype/stocking-prototype.html-1824-        <li><strong>Review the health cards.</strong> See target temperature, pH, hardness, and flow ‚Äî and how to stay there.</li>
--
prototype/stocking-prototype.html-1998-  <script src="/prototype/assets/js/proto-popovers.js?v=proto_rm_2025_10_25" defer></script>
prototype/stocking-prototype.html-1999-  <script>
prototype/stocking-prototype.html-2000-    (function () {
prototype/stocking-prototype.html:2001:      const TARGET_SELECTOR = '.filtration-card,.filtration-summary,.filter-setup-legacy,.filter-rows,.filter-row,.add-another-filter,.total-flow,.turnover,#filtration-summary,[data-card="filtration-summary"],#filtration-trigger';
prototype/stocking-prototype.html-2002-      const purge = (root = document) => {
prototype/stocking-prototype.html-2003-        root.querySelectorAll(TARGET_SELECTOR).forEach((node) => {
prototype/stocking-prototype.html-2004-          node.remove();
--
prototype/css/stocking-prototype.css-955-  font-weight: 600;
prototype/css/stocking-prototype.css-956-}
prototype/css/stocking-prototype.css-957-
prototype/css/stocking-prototype.css:958:.prototype-mode #filter-turnover [data-role="filter-turnover-value"],
prototype/css/stocking-prototype.css:959:.prototype-mode #filter-turnover .proto-turnover {
prototype/css/stocking-prototype.css-960-  display: none !important;
prototype/css/stocking-prototype.css-961-}
prototype/css/stocking-prototype.css-962-
--
prototype/assets/css/prototype-popovers.css-62-  display: none !important;
prototype/assets/css/prototype-popovers.css-63-}
prototype/assets/css/prototype-popovers.css-64-
prototype/assets/css/prototype-popovers.css:65:/* === PROTOTYPE-ONLY: tighter turnover grouping === */
prototype/assets/css/prototype-popovers.css:66:.turnover-block .field-label-row {
prototype/assets/css/prototype-popovers.css-67-  display: flex;
prototype/assets/css/prototype-popovers.css-68-  align-items: center;
prototype/assets/css/prototype-popovers.css-69-  justify-content: space-between;
--
prototype/assets/css/prototype-popovers.css-71-  margin-bottom: 6px;
prototype/assets/css/prototype-popovers.css-72-}
prototype/assets/css/prototype-popovers.css-73-
prototype/assets/css/prototype-popovers.css:74:.turnover-block .field-label {
prototype/assets/css/prototype-popovers.css-75-  margin: 0;
prototype/assets/css/prototype-popovers.css-76-  font-weight: 600;
prototype/assets/css/prototype-popovers.css-77-}
prototype/assets/css/prototype-popovers.css-78-
prototype/assets/css/prototype-popovers.css:79:.turnover-block .field-label-info {
prototype/assets/css/prototype-popovers.css-80-  min-width: 32px;
prototype/assets/css/prototype-popovers.css-81-  min-height: 32px;
prototype/assets/css/prototype-popovers.css-82-  border-radius: 16px;
--
prototype/assets/css/prototype-popovers.css-86-  padding: 0;
prototype/assets/css/prototype-popovers.css-87-}
prototype/assets/css/prototype-popovers.css-88-
prototype/assets/css/prototype-popovers.css:89:.proto-input-group.proto-turnover {
prototype/assets/css/prototype-popovers.css-90-  display: inline-flex;
prototype/assets/css/prototype-popovers.css-91-  align-items: center;
prototype/assets/css/prototype-popovers.css-92-  gap: 6px;
--
prototype/assets/css/prototype-popovers.css-107-}
prototype/assets/css/prototype-popovers.css-108-
prototype/assets/css/prototype-popovers.css-109-@media (min-width: 768px) {
prototype/assets/css/prototype-popovers.css:110:  .turnover-block {
prototype/assets/css/prototype-popovers.css-111-    display: grid;
prototype/assets/css/prototype-popovers.css-112-    grid-template-columns: 1fr auto;
prototype/assets/css/prototype-popovers.css-113-    align-items: center;
prototype/assets/css/prototype-popovers.css-114-    column-gap: 12px;
prototype/assets/css/prototype-popovers.css-115-  }
prototype/assets/css/prototype-popovers.css-116-
prototype/assets/css/prototype-popovers.css:117:  .turnover-block .field-label-row {
prototype/assets/css/prototype-popovers.css-118-    margin: 0;
prototype/assets/css/prototype-popovers.css-119-  }
prototype/assets/css/prototype-popovers.css-120-
prototype/assets/css/prototype-popovers.css:121:  .proto-input-group.proto-turnover {
prototype/assets/css/prototype-popovers.css-122-    justify-self: end;
prototype/assets/css/prototype-popovers.css-123-    margin-top: 0;
prototype/assets/css/prototype-popovers.css-124-  }
--
prototype/assets/css/prototype.css:1:/* Defensive: hide any legacy filtration summary card if it leaks in */
prototype/assets/css/prototype.css:2:#filtration-summary,
prototype/assets/css/prototype.css:3:.filtration-summary,
prototype/assets/css/prototype.css:4:[data-card="filtration-summary"],
prototype/assets/css/prototype.css:5:.filtration-card,
prototype/assets/css/prototype.css-6-.filter-setup-legacy,
prototype/assets/css/prototype.css-7-.filter-rows,
prototype/assets/css/prototype.css-8-.filter-row,
prototype/assets/css/prototype.css-9-.add-another-filter,
prototype/assets/css/prototype.css-10-.total-flow,
prototype/assets/css/prototype.css:11:.turnover,
prototype/assets/css/prototype.css:12:#filtration-trigger {
prototype/assets/css/prototype.css-13-  display: none !important;
prototype/assets/css/prototype.css-14-}
--
prototype/audit_out/buttons.md-3-|--------------------|---------|---------|----------|----------|-----------|
prototype/audit_out/buttons.md-4-| Hero stocking tip  | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md-5-| Tank size          | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md:6:| Planted toggle     | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md-7-| Filter product     | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md-8-| Rated flow         | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md:9:| Turnover guidance  | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md-10-| Stocking checklist | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md-11-| Environment info   | PASS    | PASS    | PASS     | PASS     | PASS      |
prototype/audit_out/buttons.md-12-
--
prototype/assets/css/proto-popovers.css-84-  display: none !important;
prototype/assets/css/proto-popovers.css-85-}
prototype/assets/css/proto-popovers.css-86-
prototype/assets/css/proto-popovers.css:87:/* === PROTOTYPE-ONLY compact input for turnover === */
prototype/assets/css/proto-popovers.css-88-.proto-input-group {
prototype/assets/css/proto-popovers.css-89-  position: relative;
prototype/assets/css/proto-popovers.css-90-  display: inline-flex;
--
prototype/assets/css/proto-popovers.css-142-  pointer-events: none;
prototype/assets/css/proto-popovers.css-143-}
prototype/assets/css/proto-popovers.css-144-
prototype/assets/css/proto-popovers.css:145:.proto-turnover {
prototype/assets/css/proto-popovers.css-146-  margin-top: 8px;
prototype/assets/css/proto-popovers.css-147-}
--
prototype/audit_out/bioload-postflight.md:1:# Bioload Post-flight Report
prototype/audit_out/bioload-postflight.md-2-
prototype/audit_out/bioload-postflight.md-3-## Files touched
prototype/audit_out/bioload-postflight.md:4:- `prototype/js/logic/compute-proxy.js` ‚Äî adds dev flag, detailed percent math helper, UI-bound console diagnostics, and dev harness.
prototype/audit_out/bioload-postflight.md:5:- `prototype/tests/bioload.turnover.spec.js` ‚Äî restructures into `describe` suite with Jest-style expectations.
prototype/audit_out/bioload-postflight.md:6:- `prototype/audit_out/bioload-callchain.md`, `prototype/audit_out/bioload-preflight-console.txt`, `prototype/audit_out/bioload-tests.txt` ‚Äî updated audit artifacts per brief.
prototype/audit_out/bioload-postflight.md-7-
prototype/audit_out/bioload-postflight.md-8-## Formula snapshot
prototype/audit_out/bioload-postflight.md:9:- **Final math** (`computeBioloadDetails` ‚Üí `percentBioload`):
prototype/audit_out/bioload-postflight.md-10-  ```js
prototype/audit_out/bioload-postflight.md:11:  const load = speciesLoad * (planted ? 0.90 : 1.00);
prototype/audit_out/bioload-postflight.md:12:  const turnoverX = gallons > 0 ? flowGPH / gallons : 0;
prototype/audit_out/bioload-postflight.md:13:  const capBonus = clamp(mapLinear(turnoverX, 5, 10, 0.00, 0.10), 0.00, 0.10);
prototype/audit_out/bioload-postflight.md:14:  const capacity = gallons * (1 + capBonus);
prototype/audit_out/bioload-postflight.md:15:  const percent = capacity > 0 ? (load / capacity) * 100 : 0;
prototype/audit_out/bioload-postflight.md-16-  ```
prototype/audit_out/bioload-postflight.md-17-  Flow only expands the denominator; no multipliers touch the numerator.
prototype/audit_out/bioload-postflight.md-18-
prototype/audit_out/bioload-postflight.md-19-## Monotonic check (species load ‚âà 15 GE)
prototype/audit_out/bioload-postflight.md:20:| Case | Flow (GPH) | Turnover√ó | Percent |
prototype/audit_out/bioload-postflight.md-21-|------|------------|-----------|---------|
prototype/audit_out/bioload-postflight.md-22-| A    | 80         | 2.76√ó     | 51.72% |
prototype/audit_out/bioload-postflight.md-23-| B    | 200        | 6.90√ó     | 49.83% |
prototype/audit_out/bioload-postflight.md-24-| C    | 260        | 8.97√ó     | 47.92% |
prototype/audit_out/bioload-postflight.md-25-
prototype/audit_out/bioload-postflight.md:26:Higher flow keeps the same stock at or below the previous capacity usage.
prototype/audit_out/bioload-postflight.md-27-
prototype/audit_out/bioload-postflight.md-28-## Validation
prototype/audit_out/bioload-postflight.md:29:- `node --test prototype/tests/bioload.turnover.spec.js`
prototype/audit_out/bioload-postflight.md:30:- Manual harness (`window.__runBioloadDevCases`) echoes the monotonic table above.
prototype/audit_out/bioload-postflight.md:31:- Planted toggle observed to lower percent while flag disabled.
--
prototype/audit_out/bioload-preflight-console.txt-1-[StockingAdvisor] Species loaded: 20/20; marine excluded
prototype/audit_out/bioload-preflight-console.txt:2:Status: MONOTONIC ‚Äî percent decreases with higher flow (bug not reproduced).
prototype/audit_out/bioload-preflight-console.txt-3-‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
prototype/audit_out/bioload-preflight-console.txt:4:‚îÇ (index) ‚îÇ label              ‚îÇ percent ‚îÇ turnoverX          ‚îÇ capacityBonus       ‚îÇ
prototype/audit_out/bioload-preflight-console.txt-5-‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
prototype/audit_out/bioload-preflight-console.txt-6-‚îÇ 0       ‚îÇ 'Case A (80 GPH)'  ‚îÇ 51.7241 ‚îÇ 2.7586206896551726 ‚îÇ 0                   ‚îÇ
prototype/audit_out/bioload-preflight-console.txt-7-‚îÇ 1       ‚îÇ 'Case B (200 GPH)' ‚îÇ 49.8339 ‚îÇ 6.896551724137931  ‚îÇ 0.03793103448275861 ‚îÇ
--
prototype/audit_out/buttons.json-4-  "controls": [
prototype/audit_out/buttons.json-5-    {"label": "Hero stocking tip", "selector": "#stocking-tip-btn", "section": "Hero info inline"},
prototype/audit_out/buttons.json-6-    {"label": "Tank size", "selector": "[data-proto-popover=pop-tank-size]", "section": "Tank size card"},
prototype/audit_out/buttons.json:7:    {"label": "Planted", "selector": "[data-proto-popover=pop-planted]", "section": "Planted toggle"},
prototype/audit_out/buttons.json-8-    {"label": "Filter product", "selector": "[data-proto-popover=pop-filter-product]", "section": "Filter setup"},
prototype/audit_out/buttons.json-9-    {"label": "Rated flow", "selector": "[data-proto-popover=pop-rated-flow]", "section": "Filter setup"},
prototype/audit_out/buttons.json:10:    {"label": "Turnover", "selector": "[data-proto-popover=pop-turnover]", "section": "Flow guidance"},
prototype/audit_out/buttons.json-11-    {"label": "Stocking checklist", "selector": "[data-proto-popover=pop-stocking-checklist]", "section": "Checklist"},
prototype/audit_out/buttons.json-12-    {"label": "Environmental recommendations", "selector": "[data-proto-popover=pop-env-info]", "section": "Environment"}
prototype/audit_out/buttons.json-13-  ],
--
prototype/audit_out/bioload-preflight.md:1:# Bioload Pre-flight Audit
prototype/audit_out/bioload-preflight.md-2-
prototype/audit_out/bioload-preflight.md:3:| File | Key functions | Bioload % handling | Flow/turnover applied to |
prototype/audit_out/bioload-preflight.md-4-| --- | --- | --- | --- |
prototype/audit_out/bioload-preflight.md:5:| `/js/logic/compute.js` | `computeBioload`, `buildComputedState` | Calls `computeBioloadPercent` then multiplies result by `filtration.totalFactor`, inflating % when filters add flow. | ‚ùå Numerator (load) via `value * filtration.totalFactor` |
prototype/audit_out/bioload-preflight.md:6:| `/js/bioload.js` | `computeBioloadPercent`, `computeFiltrationFactor` | Percent = `totalGE / effectiveGallons * 100`; filtration helper returns multiplier (0.9‚Äì1.1) used upstream. | ‚ùå Intended multiplier feeds numerator when consumed by `computeBioload`. |
prototype/audit_out/bioload-preflight.md:7:| `/js/logic/envRecommend.js` | `computeBioloadPct`, `computeBioloadLabel` | Reads `computed.bioload.currentPercent` / `proposedPercent` (already flow-adjusted) to render meter/badges. | ‚ùå Receives numerator-inflated percent from compute module. |
prototype/audit_out/bioload-preflight.md:8:| `/js/stocking.js` | `renderAll`, gear payload helpers | Uses `computed.bioload.proposedPercent` to announce status and set UI states. | ‚ùå Flow multiplier already baked into provided percent. |
prototype/audit_out/bioload-preflight.md:9:| `/prototype/js/proto-filtration.js` | `renderFiltration`, `computeTurnover` usage | Displays total rated GPH and turnover chip; does not adjust bioload math itself. | ‚úÖ Only denominator context (turnover display), no load multiplier applied. |
--
prototype/audit_out/bioload-tests.txt-1-TAP version 13
prototype/audit_out/bioload-tests.txt-2-# [StockingAdvisor] Species loaded: 20/20; marine excluded
prototype/audit_out/bioload-tests.txt:3:# Subtest: bioload percent & turnover relationship
prototype/audit_out/bioload-tests.txt:4:    # Subtest: more flow does NOT increase percent
prototype/audit_out/bioload-tests.txt:5:    ok 1 - more flow does NOT increase percent
prototype/audit_out/bioload-tests.txt-6-      ---
prototype/audit_out/bioload-tests.txt-7-      duration_ms: 1.874988
prototype/audit_out/bioload-tests.txt-8-      ...
prototype/audit_out/bioload-tests.txt:9:    # Subtest: planted reduces percent with same stock/flow
prototype/audit_out/bioload-tests.txt:10:    ok 2 - planted reduces percent with same stock/flow
prototype/audit_out/bioload-tests.txt-11-      ---
prototype/audit_out/bioload-tests.txt-12-      duration_ms: 0.606876
prototype/audit_out/bioload-tests.txt-13-      ...
prototype/audit_out/bioload-tests.txt:14:    # Subtest: zero-capacity guard
prototype/audit_out/bioload-tests.txt:15:    ok 3 - zero-capacity guard
prototype/audit_out/bioload-tests.txt-16-      ---
prototype/audit_out/bioload-tests.txt-17-      duration_ms: 0.40591
prototype/audit_out/bioload-tests.txt-18-      ...
prototype/audit_out/bioload-tests.txt-19-    1..3
prototype/audit_out/bioload-tests.txt:20:ok 1 - bioload percent & turnover relationship
prototype/audit_out/bioload-tests.txt-21-  ---
prototype/audit_out/bioload-tests.txt-22-  duration_ms: 5.888832
prototype/audit_out/bioload-tests.txt-23-  type: 'suite'
--
prototype/assets/js/proto-guards.js:1:// Guard: remove legacy Filtration summary card from the prototype page
prototype/assets/js/proto-guards.js-2-(() => {
prototype/assets/js/proto-guards.js-3-  const inProto = () => location.pathname.includes('/prototype/stocking-prototype.html');
prototype/assets/js/proto-guards.js-4-  if (!inProto()) return;
prototype/assets/js/proto-guards.js-5-
prototype/assets/js/proto-guards.js-6-  const LEGACY_SELECTORS = [
prototype/assets/js/proto-guards.js:7:    '#filtration-summary',
prototype/assets/js/proto-guards.js:8:    '.filtration-summary',
prototype/assets/js/proto-guards.js:9:    '[data-card="filtration-summary"]',
prototype/assets/js/proto-guards.js:10:    '.filtration-card',
prototype/assets/js/proto-guards.js:11:    '#filtration-trigger',
prototype/assets/js/proto-guards.js-12-    '.filter-setup-legacy',
prototype/assets/js/proto-guards.js-13-    '.filter-rows',
prototype/assets/js/proto-guards.js-14-    '.filter-row',
prototype/assets/js/proto-guards.js-15-    '.add-another-filter',
prototype/assets/js/proto-guards.js-16-    '.total-flow',
prototype/assets/js/proto-guards.js:17:    '.turnover'
prototype/assets/js/proto-guards.js-18-  ].join(',');
prototype/assets/js/proto-guards.js-19-
prototype/assets/js/proto-guards.js-20-  const removeLegacySummary = () => {
--
prototype/assets/js/proto-guards.js-22-      document.querySelectorAll(LEGACY_SELECTORS).forEach((node) => node.remove());
prototype/assets/js/proto-guards.js-23-    }
prototype/assets/js/proto-guards.js-24-
prototype/assets/js/proto-guards.js:25:    // Heuristic: any card whose header text is exactly "Filtration",
prototype/assets/js/proto-guards.js-26-    // but which is NOT the chip bar container nor the Filter Setup card.
prototype/assets/js/proto-guards.js-27-    const cards = document.querySelectorAll('section.card,div.card,article.card');
prototype/assets/js/proto-guards.js-28-    cards.forEach((section) => {
--
prototype/assets/js/proto-guards.js-30-      const title = titleEl?.textContent?.trim()?.toLowerCase();
prototype/assets/js/proto-guards.js-31-      const isFilterSetup = section.classList.contains('filter-setup') || section.id === 'filter-setup';
prototype/assets/js/proto-guards.js-32-      const containsChips = Boolean(section.querySelector('.chip, .pill, .chip-pills'));
prototype/assets/js/proto-guards.js:33:      if (title === 'filtration' && !isFilterSetup && !containsChips) {
prototype/assets/js/proto-guards.js-34-        section.remove();
prototype/assets/js/proto-guards.js-35-      }
prototype/assets/js/proto-guards.js-36-    });
--
prototype/audit_out/legacy-filtration-removal.md:1:# Legacy Filtration UI Removal Audit
prototype/audit_out/legacy-filtration-removal.md-2-
prototype/audit_out/legacy-filtration-removal.md-3-## Modified Assets
prototype/audit_out/legacy-filtration-removal.md-4-- `prototype/stocking-prototype.html`
prototype/audit_out/legacy-filtration-removal.md-5-  - Added prototype-only suppression style and mutation neutralizer.
prototype/audit_out/legacy-filtration-removal.md:6:  - Removed the legacy `#filtration-trigger` placeholder and cache-busted prototype asset tags.
prototype/audit_out/legacy-filtration-removal.md-7-- `prototype/assets/js/proto-guards.js`
prototype/audit_out/legacy-filtration-removal.md:8:  - Expanded defensive selector list to purge any residual legacy filtration markup.
prototype/audit_out/legacy-filtration-removal.md-9-- `prototype/assets/js/proto-popovers.js`
prototype/audit_out/legacy-filtration-removal.md-10-  - (Cache-busted reference in HTML; file contents unchanged.)
prototype/audit_out/legacy-filtration-removal.md:11:- `prototype/assets/js/filtration.js`
prototype/audit_out/legacy-filtration-removal.md-12-  - (Cache-busted reference in HTML; file contents unchanged.)
prototype/audit_out/legacy-filtration-removal.md-13-- `prototype/assets/css/proto-popovers.css`
prototype/audit_out/legacy-filtration-removal.md:14:  - Removed unused rules that targeted the legacy filtration tooltip trigger host.
prototype/audit_out/legacy-filtration-removal.md-15-- `prototype/assets/css/prototype.css`
prototype/audit_out/legacy-filtration-removal.md:16:  - Broadened guard selectors to match additional legacy filtration nodes.
prototype/audit_out/legacy-filtration-removal.md:17:- `prototype/assets/css/filtration.css`
prototype/audit_out/legacy-filtration-removal.md-18-  - (Cache-busted reference in HTML; file contents unchanged.)
prototype/audit_out/legacy-filtration-removal.md-19-
prototype/audit_out/legacy-filtration-removal.md-20-## Instrumentation Notes
--
prototype/audit_out/legacy-filtration-removal.md-27-- `prototype/audit_out/post-desktop.png` ‚Äî **not captured** (headless environment).
prototype/audit_out/legacy-filtration-removal.md-28-
prototype/audit_out/legacy-filtration-removal.md-29-## Math Utilities Verification
prototype/audit_out/legacy-filtration-removal.md:30:- The filtration math utilities that power the chip UI remain untouched in `prototype/js/proto-filtration.js` (rendering logic unchanged and still invoked via `window.renderFiltration`).
prototype/audit_out/legacy-filtration-removal.md-31-
prototype/audit_out/legacy-filtration-removal.md-32-## Additional Notes
prototype/audit_out/legacy-filtration-removal.md:33:- A prototype-only inline style and mutation observer now remove any late-injected legacy filtration elements, preventing hydration reinsertion.
--
prototype/audit_out/bioload-callchain.md:1:# Bioload Meter Call Chain
prototype/audit_out/bioload-callchain.md-2-
prototype/audit_out/bioload-callchain.md-3-1. `renderAll` (`/js/stocking.js`)
prototype/audit_out/bioload-callchain.md-4-   - Calls `buildComputedState(state)` to refresh computed metrics.
prototype/audit_out/bioload-callchain.md-5-2. `buildComputedState` (`/prototype/js/logic/compute-proxy.js`)
prototype/audit_out/bioload-callchain.md-6-   - Delegates to base compute and pipes the result through `patchComputed`.
prototype/audit_out/bioload-callchain.md:7:3. `patchComputed` ‚Üí `patchBioload` (`/prototype/js/logic/compute-proxy.js`)
prototype/audit_out/bioload-callchain.md:8:   - Recomputes `currentPercent` / `proposedPercent` via `percentBioload` and hands the percent + text back on `computed.bioload`.
prototype/audit_out/bioload-callchain.md-9-4. `renderEnvironmentPanels` (`/js/stocking.js`)
prototype/audit_out/bioload-callchain.md-10-   - Passes the updated `computed` object into `renderEnvCard`.
prototype/audit_out/bioload-callchain.md-11-5. `renderEnvCard` (`/js/logic/envRecommend.js`)
prototype/audit_out/bioload-callchain.md:12:   - Uses `computeBioloadPct(computed)` and `computeBioloadLabel(computed, entries.length)` to build the UI payload.
prototype/audit_out/bioload-callchain.md-13-6. Template rendering inside `renderEnvCard` (`/js/logic/envRecommend.js`)
prototype/audit_out/bioload-callchain.md:14:   - Writes `bioloadPct` to the meter width/ARIA (`<div class="env-bar__fill" style="width:${bioloadPct}%">`) and shows the formatted percent text (`data-role="bioload-percent"`).
--
prototype/tests/bioload.turnover.spec.js-1-import { describe, test } from 'node:test';
prototype/tests/bioload.turnover.spec.js-2-import assert from 'node:assert/strict';
prototype/tests/bioload.turnover.spec.js-3-
prototype/tests/bioload.turnover.spec.js:4:import { percentBioload } from '../js/logic/compute-proxy.js';
prototype/tests/bioload.turnover.spec.js-5-
prototype/tests/bioload.turnover.spec.js-6-const expect = (actual) => ({
prototype/tests/bioload.turnover.spec.js-7-  toBeLessThanOrEqual(expected) {
--
prototype/tests/bioload.turnover.spec.js-15-  },
prototype/tests/bioload.turnover.spec.js-16-});
prototype/tests/bioload.turnover.spec.js-17-
prototype/tests/bioload.turnover.spec.js:18:describe('bioload percent & turnover relationship', () => {
prototype/tests/bioload.turnover.spec.js:19:  const base = { gallons: 29, speciesLoad: 15, planted: false };
prototype/tests/bioload.turnover.spec.js-20-
prototype/tests/bioload.turnover.spec.js:21:  test('more flow does NOT increase percent', () => {
prototype/tests/bioload.turnover.spec.js:22:    const low = percentBioload({ ...base, flowGPH: 80 });
prototype/tests/bioload.turnover.spec.js:23:    const mid = percentBioload({ ...base, flowGPH: 200 });
prototype/tests/bioload.turnover.spec.js:24:    const high = percentBioload({ ...base, flowGPH: 260 });
prototype/tests/bioload.turnover.spec.js-25-    expect(mid).toBeLessThanOrEqual(low);
prototype/tests/bioload.turnover.spec.js-26-    expect(high).toBeLessThanOrEqual(mid);
prototype/tests/bioload.turnover.spec.js-27-  });
prototype/tests/bioload.turnover.spec.js-28-
prototype/tests/bioload.turnover.spec.js:29:  test('planted reduces percent with same stock/flow', () => {
prototype/tests/bioload.turnover.spec.js:30:    const off = percentBioload({ ...base, planted: false, flowGPH: 200 });
prototype/tests/bioload.turnover.spec.js:31:    const on = percentBioload({ ...base, planted: true, flowGPH: 200 });
prototype/tests/bioload.turnover.spec.js-32-    expect(on).toBeLessThan(off);
prototype/tests/bioload.turnover.spec.js-33-  });
prototype/tests/bioload.turnover.spec.js-34-
prototype/tests/bioload.turnover.spec.js:35:  test('zero-capacity guard', () => {
prototype/tests/bioload.turnover.spec.js:36:    const percent = percentBioload({ gallons: 0, speciesLoad: 10, planted: false, flowGPH: 200 });
prototype/tests/bioload.turnover.spec.js:37:    expect(percent).toBe(0);
prototype/tests/bioload.turnover.spec.js-38-  });
prototype/tests/bioload.turnover.spec.js-39-});
--
prototype/assets/js/proto-popovers.js-321-  observer.observe(document.body, { childList: true, subtree: true });
prototype/assets/js/proto-popovers.js-322-})();
prototype/assets/js/proto-popovers.js-323-
prototype/assets/js/proto-popovers.js:324:// === PROTOTYPE-ONLY: turnover field binding ===
prototype/assets/js/proto-popovers.js-325-(() => {
prototype/assets/js/proto-popovers.js-326-  if (!location.pathname.includes('/prototype/stocking-prototype.html')) {
prototype/assets/js/proto-popovers.js-327-    return;
prototype/assets/js/proto-popovers.js-328-  }
prototype/assets/js/proto-popovers.js-329-
prototype/assets/js/proto-popovers.js:330:  const input = document.getElementById('turnoverValue');
prototype/assets/js/proto-popovers.js-331-  if (!input) {
prototype/assets/js/proto-popovers.js-332-    return;
prototype/assets/js/proto-popovers.js-333-  }
prototype/assets/js/proto-popovers.js-334-
prototype/assets/js/proto-popovers.js-335-  input.setAttribute('aria-live', 'polite');
prototype/assets/js/proto-popovers.js-336-
prototype/assets/js/proto-popovers.js:337:  const source = document.querySelector('[data-role="filter-turnover-value"]');
prototype/assets/js/proto-popovers.js-338-  if (source) {
prototype/assets/js/proto-popovers.js-339-    source.hidden = true;
prototype/assets/js/proto-popovers.js-340-    source.setAttribute('aria-hidden', 'true');
--
prototype/assets/js/proto-popovers.js-344-
prototype/assets/js/proto-popovers.js-345-  const clamp = (value) => Math.max(0, Math.min(99.9, value));
prototype/assets/js/proto-popovers.js-346-
prototype/assets/js/proto-popovers.js:347:  const setTurnover = (value) => {
prototype/assets/js/proto-popovers.js-348-    const numeric = Number(value);
prototype/assets/js/proto-popovers.js-349-    if (Number.isFinite(numeric)) {
prototype/assets/js/proto-popovers.js-350-      const clamped = clamp(numeric);
--
prototype/assets/js/proto-popovers.js-361-    }
prototype/assets/js/proto-popovers.js-362-  };
prototype/assets/js/proto-popovers.js-363-
prototype/assets/js/proto-popovers.js:364:  const parseTurnoverText = (text) => {
prototype/assets/js/proto-popovers.js-365-    if (!text) return null;
prototype/assets/js/proto-popovers.js-366-    if (/‚Äî|--/.test(text)) return null;
prototype/assets/js/proto-popovers.js-367-    const match = text.match(/([0-9]+(?:\.[0-9]+)?)/);
prototype/assets/js/proto-popovers.js-368-    return match ? Number(match[1]) : null;
prototype/assets/js/proto-popovers.js-369-  };
prototype/assets/js/proto-popovers.js-370-
prototype/assets/js/proto-popovers.js:371:  window.__setPrototypeTurnover = setTurnover;
prototype/assets/js/proto-popovers.js-372-
prototype/assets/js/proto-popovers.js-373-  const syncFromSource = () => {
prototype/assets/js/proto-popovers.js-374-    if (!source) return;
prototype/assets/js/proto-popovers.js-375-    const text = source.textContent.trim();
prototype/assets/js/proto-popovers.js:376:    const parsed = parseTurnoverText(text);
prototype/assets/js/proto-popovers.js:377:    setTurnover(parsed);
prototype/assets/js/proto-popovers.js-378-    if (Number.isFinite(parsed)) {
prototype/assets/js/proto-popovers.js:379:      window.__initialTurnover = parsed;
prototype/assets/js/proto-popovers.js-380-    }
prototype/assets/js/proto-popovers.js-381-  };
prototype/assets/js/proto-popovers.js-382-
--
prototype/assets/js/proto-popovers.js-384-    syncFromSource();
prototype/assets/js/proto-popovers.js-385-    const observer = new MutationObserver(syncFromSource);
prototype/assets/js/proto-popovers.js-386-    observer.observe(source, { characterData: true, childList: true, subtree: true });
prototype/assets/js/proto-popovers.js:387:  } else if (typeof window.__initialTurnover !== 'undefined') {
prototype/assets/js/proto-popovers.js:388:    setTurnover(window.__initialTurnover);
prototype/assets/js/proto-popovers.js-389-  }
prototype/assets/js/proto-popovers.js-390-})();
--
prototype/assets/js/filtration.js-1-(() => {
prototype/assets/js/filtration.js-2-  if (!location.pathname.includes('/prototype/stocking-prototype.html')) return;
prototype/assets/js/filtration.js-3-
prototype/assets/js/filtration.js:4:  window.renderFiltration?.();
prototype/assets/js/filtration.js-5-})();
--
prototype/js/stocking-prototype.js-183-    });
prototype/js/stocking-prototype.js-184-  };
prototype/js/stocking-prototype.js-185-
prototype/js/stocking-prototype.js:186:  const removeFiltrationSummaryInfo = () => {
prototype/js/stocking-prototype.js:187:    const host = document.getElementById('filtration-trigger');
prototype/js/stocking-prototype.js-188-    if (!host) return;
prototype/js/stocking-prototype.js-189-
prototype/js/stocking-prototype.js:190:    const INFO_SELECTOR = '[data-role="filtration-info"]';
prototype/js/stocking-prototype.js:191:    const PANEL_ID = 'filtration-pill-tip';
prototype/js/stocking-prototype.js-192-
prototype/js/stocking-prototype.js-193-    const prune = () => {
prototype/js/stocking-prototype.js-194-      const infoTrigger = host.querySelector(INFO_SELECTOR);
prototype/js/stocking-prototype.js-195-      if (infoTrigger) {
prototype/js/stocking-prototype.js:196:        // Filtration summary info trigger selectors:
prototype/js/stocking-prototype.js:197:        // - #filtration-trigger [data-role="filtration-info"]
prototype/js/stocking-prototype.js:198:        // - .info-btn.ttg-tooltip-trigger[aria-controls="filtration-pill-tip"]
prototype/js/stocking-prototype.js:199:        // Associated panel id: "filtration-pill-tip"
prototype/js/stocking-prototype.js-200-        const panelId = infoTrigger.getAttribute('aria-controls') || PANEL_ID;
prototype/js/stocking-prototype.js-201-        infoTrigger.remove();
prototype/js/stocking-prototype.js-202-        if (panelId) {
--
prototype/js/stocking-prototype.js-228-  document.addEventListener('DOMContentLoaded', () => {
prototype/js/stocking-prototype.js-229-    setupHowItWorksModal();
prototype/js/stocking-prototype.js-230-    setupFeatureCta();
prototype/js/stocking-prototype.js:231:    removeFiltrationSummaryInfo();
prototype/js/stocking-prototype.js-232-  });
prototype/js/stocking-prototype.js-233-
prototype/js/stocking-prototype.js-234-  const adSlots = document.querySelectorAll('[data-prototype-ad]');
--
prototype/js/stocking-prototype.js-238-  });
prototype/js/stocking-prototype.js-239-
prototype/js/stocking-prototype.js-240-  window.addEventListener('load', () => {
prototype/js/stocking-prototype.js:241:    const plantedToggle = document.querySelector('#stocking-planted');
prototype/js/stocking-prototype.js:242:    if (!plantedToggle) return;
prototype/js/stocking-prototype.js-243-
prototype/js/stocking-prototype.js-244-    const status = document.getElementById('stocking-status');
prototype/js/stocking-prototype.js-245-    if (status) {
prototype/js/stocking-prototype.js-246-      status.setAttribute('aria-live', 'polite');
prototype/js/stocking-prototype.js-247-    }
prototype/js/stocking-prototype.js-248-
prototype/js/stocking-prototype.js:249:    plantedToggle.addEventListener('change', () => {
prototype/js/stocking-prototype.js:250:      document.querySelector('main.stocking-page')?.classList.toggle('is-planted', plantedToggle.checked);
prototype/js/stocking-prototype.js-251-    });
prototype/js/stocking-prototype.js-252-  });
prototype/js/stocking-prototype.js-253-})();
--
prototype/js/logic/compute-proxy.js-1-import * as baseCompute from '../../../js/logic/compute.js?orig';
prototype/js/logic/compute-proxy.js:2:import { formatBioloadPercent } from '../../../js/bioload.js?orig';
prototype/js/logic/compute-proxy.js-3-import { getBandColor } from '../../../js/logic/utils.js?orig';
prototype/js/logic/compute-proxy.js-4-
prototype/js/logic/compute-proxy.js:5:const { computeBioload: baseComputeBioload, buildComputedState: baseBuildComputedState, calcTotalGph } = baseCompute;
prototype/js/logic/compute-proxy.js-6-
prototype/js/logic/compute-proxy.js:7:const __DEV_BIOLOAD = false;
prototype/js/logic/compute-proxy.js-8-
prototype/js/logic/compute-proxy.js-9-const clamp = (value, lo, hi) => Math.min(hi, Math.max(lo, value));
prototype/js/logic/compute-proxy.js-10-
--
prototype/js/logic/compute-proxy.js-14-  return min + (max - min) * t;
prototype/js/logic/compute-proxy.js-15-};
prototype/js/logic/compute-proxy.js-16-
prototype/js/logic/compute-proxy.js:17:const computeBioloadDetails = ({ gallons, planted, speciesLoad, flowGPH }) => {
prototype/js/logic/compute-proxy.js-18-  const tankGallons = Math.max(0, Number(gallons || 0));
prototype/js/logic/compute-proxy.js:19:  const plantedAdj = planted ? 0.90 : 1.00;
prototype/js/logic/compute-proxy.js:20:  const flow = Math.max(0, Number(flowGPH || 0));
prototype/js/logic/compute-proxy.js-21-  const speciesTotal = Math.max(0, Number(speciesLoad || 0));
prototype/js/logic/compute-proxy.js-22-
prototype/js/logic/compute-proxy.js:23:  const load = speciesTotal * plantedAdj;
prototype/js/logic/compute-proxy.js:24:  const baseCapacity = tankGallons * 1.0;
prototype/js/logic/compute-proxy.js:25:  const turnoverX = tankGallons > 0 ? flow / tankGallons : 0;
prototype/js/logic/compute-proxy.js:26:  const rawBonus = mapLinear(turnoverX, 5, 10, 0.00, 0.10);
prototype/js/logic/compute-proxy.js-27-  const capBonus = clamp(rawBonus, 0.00, 0.10);
prototype/js/logic/compute-proxy.js:28:  const capacity = baseCapacity * (1 + capBonus);
prototype/js/logic/compute-proxy.js:29:  const percent = capacity > 0 ? (load / capacity) * 100 : 0;
prototype/js/logic/compute-proxy.js-30-
prototype/js/logic/compute-proxy.js-31-  return {
prototype/js/logic/compute-proxy.js-32-    gallons: tankGallons,
prototype/js/logic/compute-proxy.js:33:    planted: Boolean(planted),
prototype/js/logic/compute-proxy.js-34-    speciesLoad: speciesTotal,
prototype/js/logic/compute-proxy.js:35:    flowGPH: flow,
prototype/js/logic/compute-proxy.js:36:    plantedAdj,
prototype/js/logic/compute-proxy.js-37-    load,
prototype/js/logic/compute-proxy.js:38:    baseCapacity,
prototype/js/logic/compute-proxy.js:39:    turnoverX,
prototype/js/logic/compute-proxy.js-40-    rawBonus,
prototype/js/logic/compute-proxy.js-41-    capBonus,
prototype/js/logic/compute-proxy.js:42:    capacity,
prototype/js/logic/compute-proxy.js:43:    percent,
prototype/js/logic/compute-proxy.js-44-  };
prototype/js/logic/compute-proxy.js-45-};
prototype/js/logic/compute-proxy.js-46-
prototype/js/logic/compute-proxy.js:47:export const percentBioload = (state) => computeBioloadDetails(state).percent;
prototype/js/logic/compute-proxy.js-48-
prototype/js/logic/compute-proxy.js:49:const computeFlowBonus = (gallons, flowGPH) => {
prototype/js/logic/compute-proxy.js-50-  const tankGallons = Math.max(0, Number(gallons || 0));
prototype/js/logic/compute-proxy.js:51:  const flow = Math.max(0, Number(flowGPH || 0));
prototype/js/logic/compute-proxy.js-52-  if (tankGallons <= 0 || flow <= 0) return 0;
prototype/js/logic/compute-proxy.js:53:  const turnoverX = flow / tankGallons;
prototype/js/logic/compute-proxy.js:54:  return clamp(mapLinear(turnoverX, 5, 10, 0, 0.10), 0, 0.10);
prototype/js/logic/compute-proxy.js-55-};
prototype/js/logic/compute-proxy.js-56-
prototype/js/logic/compute-proxy.js:57:const resolveFlowGph = (tank, filterState = {}, raw) => {
prototype/js/logic/compute-proxy.js-58-  const filtersList = Array.isArray(filterState.filters) ? filterState.filters : [];
prototype/js/logic/compute-proxy.js-59-  const totalRatedGph = Number.isFinite(filterState.totalGph) && filterState.totalGph > 0
prototype/js/logic/compute-proxy.js-60-    ? filterState.totalGph
--
prototype/js/logic/compute-proxy.js-78-    return tank.ratedGph;
prototype/js/logic/compute-proxy.js-79-  }
prototype/js/logic/compute-proxy.js-80-  const gallons = Number.isFinite(tank?.gallons) && tank.gallons > 0 ? tank.gallons : 0;
prototype/js/logic/compute-proxy.js:81:  if (gallons > 0 && Number.isFinite(filterState.turnover) && filterState.turnover > 0) {
prototype/js/logic/compute-proxy.js:82:    return filterState.turnover * gallons;
prototype/js/logic/compute-proxy.js-83-  }
prototype/js/logic/compute-proxy.js-84-  return 0;
prototype/js/logic/compute-proxy.js-85-};
prototype/js/logic/compute-proxy.js-86-
prototype/js/logic/compute-proxy.js:87:const resolveTurnover = (tank, flowGPH, filterState = {}, raw) => {
prototype/js/logic/compute-proxy.js:88:  if (Number.isFinite(filterState.turnover) && filterState.turnover > 0) {
prototype/js/logic/compute-proxy.js:89:    return filterState.turnover;
prototype/js/logic/compute-proxy.js-90-  }
prototype/js/logic/compute-proxy.js:91:  if (Number.isFinite(raw?.flowAdjustment?.turnover) && raw.flowAdjustment.turnover > 0) {
prototype/js/logic/compute-proxy.js:92:    return raw.flowAdjustment.turnover;
prototype/js/logic/compute-proxy.js-93-  }
prototype/js/logic/compute-proxy.js-94-  const gallons = Number.isFinite(tank?.gallons) && tank.gallons > 0 ? tank.gallons : 0;
prototype/js/logic/compute-proxy.js:95:  if (gallons > 0 && flowGPH > 0) {
prototype/js/logic/compute-proxy.js:96:    return flowGPH / gallons;
prototype/js/logic/compute-proxy.js-97-  }
prototype/js/logic/compute-proxy.js:98:  if (Number.isFinite(tank?.turnover) && tank.turnover > 0) {
prototype/js/logic/compute-proxy.js:99:    return tank.turnover;
prototype/js/logic/compute-proxy.js-100-  }
prototype/js/logic/compute-proxy.js-101-  return null;
prototype/js/logic/compute-proxy.js-102-};
prototype/js/logic/compute-proxy.js-103-
prototype/js/logic/compute-proxy.js:104:const resolveActualGph = (raw, flowGPH, filterState = {}, tank) => {
prototype/js/logic/compute-proxy.js-105-  if (Number.isFinite(raw?.flowAdjustment?.actualGph) && raw.flowAdjustment.actualGph > 0) {
prototype/js/logic/compute-proxy.js-106-    return raw.flowAdjustment.actualGph;
prototype/js/logic/compute-proxy.js-107-  }
--
prototype/js/logic/compute-proxy.js-111-  if (Number.isFinite(filterState.ratedGph) && filterState.ratedGph > 0) {
prototype/js/logic/compute-proxy.js-112-    return filterState.ratedGph;
prototype/js/logic/compute-proxy.js-113-  }
prototype/js/logic/compute-proxy.js:114:  if (flowGPH > 0) {
prototype/js/logic/compute-proxy.js:115:    return flowGPH;
prototype/js/logic/compute-proxy.js-116-  }
prototype/js/logic/compute-proxy.js-117-  if (Number.isFinite(tank?.deliveredGph) && tank.deliveredGph > 0) {
prototype/js/logic/compute-proxy.js-118-    return tank.deliveredGph;
--
prototype/js/logic/compute-proxy.js-120-  return null;
prototype/js/logic/compute-proxy.js-121-};
prototype/js/logic/compute-proxy.js-122-
prototype/js/logic/compute-proxy.js:123:const patchBioload = (raw, { tank, filterState } = {}) => {
prototype/js/logic/compute-proxy.js-124-  if (!raw || !tank) {
prototype/js/logic/compute-proxy.js-125-    return raw;
prototype/js/logic/compute-proxy.js-126-  }
prototype/js/logic/compute-proxy.js-127-  const gallons = Number.isFinite(tank?.gallons) ? tank.gallons : 0;
prototype/js/logic/compute-proxy.js:128:  const planted = Boolean(tank?.planted);
prototype/js/logic/compute-proxy.js:129:  const flowGPH = resolveFlowGph(tank, filterState, raw);
prototype/js/logic/compute-proxy.js-130-
prototype/js/logic/compute-proxy.js:131:  const baseCurrentDetails = computeBioloadDetails({ gallons, planted, speciesLoad: raw.currentLoad ?? 0, flowGPH: 0 });
prototype/js/logic/compute-proxy.js:132:  const baseProposedDetails = computeBioloadDetails({ gallons, planted, speciesLoad: raw.proposed ?? 0, flowGPH: 0 });
prototype/js/logic/compute-proxy.js:133:  const currentDetails = computeBioloadDetails({ gallons, planted, speciesLoad: raw.currentLoad ?? 0, flowGPH });
prototype/js/logic/compute-proxy.js:134:  const proposedDetails = computeBioloadDetails({ gallons, planted, speciesLoad: raw.proposed ?? 0, flowGPH });
prototype/js/logic/compute-proxy.js-135-
prototype/js/logic/compute-proxy.js:136:  const baseCurrentPercentValue = baseCurrentDetails.percent;
prototype/js/logic/compute-proxy.js:137:  const baseProposedPercentValue = baseProposedDetails.percent;
prototype/js/logic/compute-proxy.js:138:  const currentPercentValue = currentDetails.percent;
prototype/js/logic/compute-proxy.js:139:  const proposedPercentValue = proposedDetails.percent;
prototype/js/logic/compute-proxy.js-140-
prototype/js/logic/compute-proxy.js:141:  const currentPercent = currentPercentValue / 100;
prototype/js/logic/compute-proxy.js:142:  const proposedPercent = proposedPercentValue / 100;
prototype/js/logic/compute-proxy.js:143:  const color = getBandColor?.(proposedPercent) ?? raw.color;
prototype/js/logic/compute-proxy.js:144:  const turnover = resolveTurnover(tank, flowGPH, filterState, raw);
prototype/js/logic/compute-proxy.js:145:  const turnoverIssue = Number.isFinite(turnover) ? turnover < 2 : false;
prototype/js/logic/compute-proxy.js:146:  const severity = proposedPercent > 1.1
prototype/js/logic/compute-proxy.js-147-    ? 'bad'
prototype/js/logic/compute-proxy.js:148:    : proposedPercent > 0.9
prototype/js/logic/compute-proxy.js-149-      ? 'warn'
prototype/js/logic/compute-proxy.js:150:      : turnoverIssue
prototype/js/logic/compute-proxy.js-151-        ? 'warn'
prototype/js/logic/compute-proxy.js-152-        : 'ok';
prototype/js/logic/compute-proxy.js:153:  const text = `${formatBioloadPercent(currentPercentValue)} ‚Üí ${formatBioloadPercent(proposedPercentValue)} of capacity`;
prototype/js/logic/compute-proxy.js:154:  const message = turnoverIssue ? 'Turnover below 2√ó ‚Äî upgrade filtration' : raw.message;
prototype/js/logic/compute-proxy.js:155:  const capBonus = computeFlowBonus(gallons, flowGPH);
prototype/js/logic/compute-proxy.js:156:  const capacityMultiplier = 1 + capBonus;
prototype/js/logic/compute-proxy.js:157:  const totalFactor = capacityMultiplier > 0 ? 1 / capacityMultiplier : 1;
prototype/js/logic/compute-proxy.js-158-
prototype/js/logic/compute-proxy.js-159-  const flowAdjustment = {
prototype/js/logic/compute-proxy.js-160-    ...raw.flowAdjustment,
prototype/js/logic/compute-proxy.js:161:    actualGph: resolveActualGph(raw, flowGPH, filterState, tank),
prototype/js/logic/compute-proxy.js:162:    turnover: Number.isFinite(turnover) ? turnover : null,
prototype/js/logic/compute-proxy.js-163-    flowBonus: capBonus,
prototype/js/logic/compute-proxy.js:164:    capacityMultiplier,
prototype/js/logic/compute-proxy.js-165-    totalFactor,
prototype/js/logic/compute-proxy.js-166-    flowFactor: totalFactor,
prototype/js/logic/compute-proxy.js-167-  };
--
prototype/js/logic/compute-proxy.js-170-    flowAdjustment.mixFactor = raw.flowAdjustment.mixFactor;
prototype/js/logic/compute-proxy.js-171-  }
prototype/js/logic/compute-proxy.js-172-
prototype/js/logic/compute-proxy.js:173:  if (__DEV_BIOLOAD && typeof console !== 'undefined') {
prototype/js/logic/compute-proxy.js-174-    const debugRow = {
prototype/js/logic/compute-proxy.js-175-      gallons,
prototype/js/logic/compute-proxy.js-176-      speciesLoad: proposedDetails.speciesLoad,
prototype/js/logic/compute-proxy.js:177:      planted,
prototype/js/logic/compute-proxy.js:178:      flowGPH,
prototype/js/logic/compute-proxy.js:179:      turnoverX: proposedDetails.turnoverX,
prototype/js/logic/compute-proxy.js:180:      efficiencyUsed: '(none)',
prototype/js/logic/compute-proxy.js:181:      capacityBonus: Number.isFinite(proposedDetails.capBonus) ? proposedDetails.capBonus : '(none)',
prototype/js/logic/compute-proxy.js-182-      numerator_load: proposedDetails.load,
prototype/js/logic/compute-proxy.js:183:      denominator_capacity: proposedDetails.capacity,
prototype/js/logic/compute-proxy.js:184:      percent_out: proposedPercentValue,
prototype/js/logic/compute-proxy.js-185-    };
prototype/js/logic/compute-proxy.js-186-    try {
prototype/js/logic/compute-proxy.js-187-      console.table(debugRow);
prototype/js/logic/compute-proxy.js-188-    } catch (error) {
prototype/js/logic/compute-proxy.js:189:      console.log('Bioload debug', debugRow, error);
prototype/js/logic/compute-proxy.js-190-    }
prototype/js/logic/compute-proxy.js-191-  }
prototype/js/logic/compute-proxy.js-192-
prototype/js/logic/compute-proxy.js-193-  return {
prototype/js/logic/compute-proxy.js-194-    ...raw,
prototype/js/logic/compute-proxy.js:195:    currentPercent,
prototype/js/logic/compute-proxy.js:196:    proposedPercent,
prototype/js/logic/compute-proxy.js-197-    color,
prototype/js/logic/compute-proxy.js-198-    severity,
prototype/js/logic/compute-proxy.js-199-    text,
--
prototype/js/logic/compute-proxy.js-201-    flowAdjustment,
prototype/js/logic/compute-proxy.js-202-    adjustedCurrentLoad: raw.currentLoad,
prototype/js/logic/compute-proxy.js-203-    adjustedProposed: raw.proposed,
prototype/js/logic/compute-proxy.js:204:    baseCurrentPercent: baseCurrentPercentValue / 100,
prototype/js/logic/compute-proxy.js:205:    baseProposedPercent: baseProposedPercentValue / 100,
prototype/js/logic/compute-proxy.js:206:    baseCurrentPercentValue,
prototype/js/logic/compute-proxy.js:207:    baseProposedPercentValue,
prototype/js/logic/compute-proxy.js-208-  };
prototype/js/logic/compute-proxy.js-209-};
prototype/js/logic/compute-proxy.js-210-
prototype/js/logic/compute-proxy.js-211-const deriveFilterState = (state, computed) => {
prototype/js/logic/compute-proxy.js-212-  const filters = computed?.filtering?.filters ?? state?.filters ?? [];
prototype/js/logic/compute-proxy.js-213-  const totalGph = computed?.filtering?.gphTotal ?? state?.totalGph ?? null;
prototype/js/logic/compute-proxy.js:214:  const turnover = computed?.filtering?.turnover ?? computed?.bioload?.flowAdjustment?.turnover ?? state?.turnover ?? null;
prototype/js/logic/compute-proxy.js-215-  const ratedGph = computed?.filtering?.ratedGph ?? state?.ratedGph ?? null;
prototype/js/logic/compute-proxy.js:216:  return { filters, totalGph, turnover, ratedGph };
prototype/js/logic/compute-proxy.js-217-};
prototype/js/logic/compute-proxy.js-218-
prototype/js/logic/compute-proxy.js-219-const patchComputed = (computed, state) => {
--
prototype/js/logic/compute-proxy.js-221-    return computed;
prototype/js/logic/compute-proxy.js-222-  }
prototype/js/logic/compute-proxy.js-223-  const filterState = deriveFilterState(state, computed);
prototype/js/logic/compute-proxy.js:224:  const patchedBioload = patchBioload(computed.bioload, { tank: computed.tank, filterState });
prototype/js/logic/compute-proxy.js:225:  if (patchedBioload === computed.bioload) {
prototype/js/logic/compute-proxy.js-226-    return computed;
prototype/js/logic/compute-proxy.js-227-  }
prototype/js/logic/compute-proxy.js:228:  return { ...computed, bioload: patchedBioload };
prototype/js/logic/compute-proxy.js-229-};
prototype/js/logic/compute-proxy.js-230-
prototype/js/logic/compute-proxy.js-231-export * from '../../../js/logic/compute.js?orig';
prototype/js/logic/compute-proxy.js-232-
prototype/js/logic/compute-proxy.js:233:export function computeBioload(tank, entries, candidate, filterState = {}) {
prototype/js/logic/compute-proxy.js:234:  const raw = baseComputeBioload(tank, entries, candidate, filterState);
prototype/js/logic/compute-proxy.js:235:  return patchBioload(raw, { tank, filterState });
prototype/js/logic/compute-proxy.js-236-}
prototype/js/logic/compute-proxy.js-237-
prototype/js/logic/compute-proxy.js-238-export function buildComputedState(state) {
--
prototype/js/logic/compute-proxy.js-240-  return patchComputed(raw, state);
prototype/js/logic/compute-proxy.js-241-}
prototype/js/logic/compute-proxy.js-242-
prototype/js/logic/compute-proxy.js:243:if (__DEV_BIOLOAD && typeof window !== 'undefined') {
prototype/js/logic/compute-proxy.js-244-  const runDevCases = () => {
prototype/js/logic/compute-proxy.js:245:    const base = { gallons: 29, speciesLoad: 15, planted: false };
prototype/js/logic/compute-proxy.js-246-    const variants = [
prototype/js/logic/compute-proxy.js:247:      { ...base, flowGPH: 80, label: 'Case A (80 GPH)' },
prototype/js/logic/compute-proxy.js:248:      { ...base, flowGPH: 200, label: 'Case B (200 GPH)' },
prototype/js/logic/compute-proxy.js:249:      { ...base, flowGPH: 260, label: 'Case C (260 GPH)' },
prototype/js/logic/compute-proxy.js-250-    ];
prototype/js/logic/compute-proxy.js-251-    const rows = variants.map((variant) => {
prototype/js/logic/compute-proxy.js:252:      const details = computeBioloadDetails(variant);
prototype/js/logic/compute-proxy.js-253-      return {
prototype/js/logic/compute-proxy.js-254-        label: variant.label,
prototype/js/logic/compute-proxy.js:255:        percent: Number(details.percent.toFixed(4)),
prototype/js/logic/compute-proxy.js:256:        turnoverX: details.turnoverX,
prototype/js/logic/compute-proxy.js:257:        capacityBonus: details.capBonus,
prototype/js/logic/compute-proxy.js-258-      };
prototype/js/logic/compute-proxy.js-259-    });
prototype/js/logic/compute-proxy.js-260-    try {
prototype/js/logic/compute-proxy.js-261-      console.table(rows);
prototype/js/logic/compute-proxy.js-262-    } catch (error) {
prototype/js/logic/compute-proxy.js:263:      console.log('Bioload dev cases', rows, error);
prototype/js/logic/compute-proxy.js-264-    }
prototype/js/logic/compute-proxy.js-265-    return rows;
prototype/js/logic/compute-proxy.js-266-  };
prototype/js/logic/compute-proxy.js-267-
prototype/js/logic/compute-proxy.js:268:  window.__runBioloadDevCases = runDevCases;
prototype/js/logic/compute-proxy.js-269-
prototype/js/logic/compute-proxy.js-270-  const attachDevButton = () => {
prototype/js/logic/compute-proxy.js:271:    if (!document?.body || document.getElementById('dev-bioload-trigger')) {
prototype/js/logic/compute-proxy.js-272-      return;
prototype/js/logic/compute-proxy.js-273-    }
prototype/js/logic/compute-proxy.js-274-    const button = document.createElement('button');
prototype/js/logic/compute-proxy.js-275-    button.type = 'button';
prototype/js/logic/compute-proxy.js:276:    button.id = 'dev-bioload-trigger';
prototype/js/logic/compute-proxy.js:277:    button.textContent = 'Run Bioload DEV Cases';
prototype/js/logic/compute-proxy.js-278-    button.style.position = 'fixed';
prototype/js/logic/compute-proxy.js-279-    button.style.bottom = '1rem';
prototype/js/logic/compute-proxy.js-280-    button.style.right = '1rem';
--
prototype/js/proto-filtration.js-1-import { canonicalizeFilterType } from '/js/utils.js';
prototype/js/proto-filtration.js:2:import { calcTotalGph, computeTurnover } from '/js/logic/compute.js';
prototype/js/proto-filtration.js-3-
prototype/js/proto-filtration.js-4-const FILTER_STORAGE_KEY = 'ttg.stocking.filters.v1';
prototype/js/proto-filtration.js-5-const FILTER_SOURCES = Object.freeze({
--
prototype/js/proto-filtration.js-58-  return String(Math.round(num));
prototype/js/proto-filtration.js-59-}
prototype/js/proto-filtration.js-60-
prototype/js/proto-filtration.js:61:function formatTurnover(value) {
prototype/js/proto-filtration.js-62-  const num = Number(value);
prototype/js/proto-filtration.js-63-  if (!Number.isFinite(num) || num <= 0) {
prototype/js/proto-filtration.js-64-    return '0.0';
--
prototype/js/proto-filtration.js-336-  if (!refs.summary) return;
prototype/js/proto-filtration.js-337-  const appFilters = state.filters.map((item) => toAppFilter(item));
prototype/js/proto-filtration.js-338-  const totalGph = calcTotalGph(appFilters);
prototype/js/proto-filtration.js:339:  const turnover = computeTurnover(state.tankGallons, appFilters);
prototype/js/proto-filtration.js:340:  refs.summary.textContent = `Filtration: ${formatGph(totalGph)} GPH ‚Ä¢ ${formatTurnover(turnover)}√ó/h`;
prototype/js/proto-filtration.js-341-}
prototype/js/proto-filtration.js-342-
prototype/js/proto-filtration.js-343-function syncSelectValue() {
--
prototype/js/proto-filtration.js-380-  state.tankGallons = getTankGallons();
prototype/js/proto-filtration.js-381-  renderChips();
prototype/js/proto-filtration.js-382-  renderSummary();
prototype/js/proto-filtration.js:383:  if (typeof window.renderFiltration === 'function') {
prototype/js/proto-filtration.js:384:    window.renderFiltration();
prototype/js/proto-filtration.js-385-  }
prototype/js/proto-filtration.js-386-  const productFilters = state.filters.filter((item) => item.source === FILTER_SOURCES.PRODUCT);
prototype/js/proto-filtration.js-387-  const latestProduct = productFilters.length ? productFilters[productFilters.length - 1] : null;
--
prototype/js/proto-filtration.js-491-  return true;
prototype/js/proto-filtration.js-492-}
prototype/js/proto-filtration.js-493-
prototype/js/proto-filtration.js:494:window.renderFiltration = function renderFiltration() {
prototype/js/proto-filtration.js-495-  const tankGallons = getTankGallons();
prototype/js/proto-filtration.js-496-  if (Number.isFinite(tankGallons) && tankGallons >= 0) {
prototype/js/proto-filtration.js-497-    state.tankGallons = tankGallons;
prototype/js/proto-filtration.js-498-  }
prototype/js/proto-filtration.js-499-  const appFilters = state.filters.map((item) => toAppFilter(item));
prototype/js/proto-filtration.js-500-  const totalGph = calcTotalGph(appFilters);
prototype/js/proto-filtration.js:501:  const turnover = computeTurnover(state.tankGallons, appFilters);
prototype/js/proto-filtration.js:502:  const chipbar = document.querySelector('.filtration-chipbar');
prototype/js/proto-filtration.js-503-  if (chipbar) {
prototype/js/proto-filtration.js:504:    chipbar.dataset.total = `${formatGph(totalGph)} GPH ‚Ä¢ ${formatTurnover(turnover)}√ó/h`;
prototype/js/proto-filtration.js-505-  }
prototype/js/proto-filtration.js-506-};
prototype/js/proto-filtration.js-507-
