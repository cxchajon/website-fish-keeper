name: Prototype Guardrail

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  guardrail:
    name: Prototype Guardrail
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Evaluate prototype allowlist
        id: guard
        continue-on-error: true
        run: |
          node scripts/prototype-allowlist-check.mjs \
            --mode=diff \
            --diff "origin/${{ github.event.pull_request.base.ref }}...HEAD" \
            --hook ci \
            --report-json guardrail-report.json

      - name: Parse guardrail report
        id: report
        if: always()
        run: |
          if [ ! -f guardrail-report.json ]; then
            exit 0
          fi
          python - <<'PY'
import json, os
report_path = 'guardrail-report.json'
if not os.path.exists(report_path):
    raise SystemExit(0)
with open(report_path, 'r', encoding='utf8') as fh:
    data = json.load(fh)
outputs = []
outputs.append(f"allowed={str(data.get('allowed', False)).lower()}")
disallowed = data.get('disallowed', [])
outputs.append('disallowed<<EOF')
outputs.extend(disallowed)
outputs.append('EOF')
outputs.append(f"allowlist={data.get('allowlist', '.guard/prototype-allowlist.txt')}")
with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf8') as fh:
    fh.write('\n'.join(outputs) + '\n')
PY

      - name: Comment with guardrail status
        if: ${{ always() && steps.report.outputs.allowed == 'false' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const disallowed = `
${{ steps.report.outputs.disallowed }}
`.split('\n').filter(Boolean);
            if (!disallowed.length) {
              return;
            }
            const body = [
              'ðŸš« **Prototype Guardrail** blocked this PR.',
              '',
              'Files outside the prototype scope were detected:',
              ...disallowed.map((file) => `- \\`${file}\\``),
              '',
              'Only paths listed in [/.guard/prototype-allowlist.txt](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/${{ steps.report.outputs.allowlist }}) are permitted without an override.',
              'See [/.guard/OVERRIDE.md](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/.guard/OVERRIDE.md) for the break-glass procedure.'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });

      - name: Enforce guardrail result
        if: ${{ steps.guard.outcome == 'failure' || steps.report.outputs.allowed == 'false' }}
        run: |
          echo "Prototype Guardrail failed."
          exit 1
