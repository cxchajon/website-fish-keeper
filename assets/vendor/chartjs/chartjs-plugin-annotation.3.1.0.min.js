(function (global) {
  'use strict';

  const Chart = global.Chart;
  if (!Chart) {
    return;
  }

  function resolveAnnotations(config) {
    if (!config) {
      return [];
    }
    if (Array.isArray(config)) {
      return config;
    }
    return Object.keys(config).map((key) => config[key]);
  }

  const AnnotationPlugin = {
    id: 'annotation',
    afterDraw(chart) {
      const annotations = resolveAnnotations(chart.options?.plugins?.annotation?.annotations);
      if (!annotations.length) {
        return;
      }
      annotations.forEach((annotation) => {
        if (!annotation) {
          return;
        }
        if ((annotation.type && annotation.type !== 'line') && annotation.type !== 'horizontalLine') {
          return;
        }
        const targetValue = annotation.yMin ?? annotation.yValue ?? annotation.value ?? annotation.y;
        if (typeof targetValue !== 'number') {
          return;
        }
        const y = chart.getPixelForValue('y', targetValue);
        if (typeof y !== 'number') {
          return;
        }
        const ctx = chart.ctx2d || chart.ctx;
        const area = chart._chartArea;
        if (!area) {
          return;
        }
        ctx.save();
        ctx.beginPath();
        ctx.setLineDash(annotation.borderDash || [6, 6]);
        ctx.strokeStyle = annotation.borderColor || 'rgba(255, 255, 255, 0.45)';
        ctx.lineWidth = annotation.borderWidth || 1.5;
        ctx.moveTo(area.left, y);
        ctx.lineTo(area.right, y);
        ctx.stroke();
        ctx.restore();

        if (annotation.label && annotation.label.content) {
          const labelConfig = annotation.label;
          const text = Array.isArray(labelConfig.content)
            ? labelConfig.content.join(' ')
            : String(labelConfig.content);
          ctx.save();
          ctx.font = `${Chart.defaults.font.weight} ${Math.max(Chart.defaults.font.size - 2, 10)}px ${Chart.defaults.font.family}`;
          const padding = typeof labelConfig.padding === 'number' ? labelConfig.padding : 6;
          const metrics = ctx.measureText(text);
          const boxWidth = metrics.width + padding * 2;
          const boxHeight = (Chart.defaults.font.size || 14) + padding * 2;
          const x = area.left + 8;
          const yOffset = labelConfig.position === 'start' ? -boxHeight - 4 : 8;
          const boxY = y + yOffset;
          ctx.fillStyle = labelConfig.backgroundColor || 'rgba(15, 23, 42, 0.85)';
          ctx.strokeStyle = labelConfig.borderColor || 'rgba(59, 130, 246, 0.45)';
          ctx.lineWidth = 1;
          ctx.beginPath();
          ctx.moveTo(x, boxY);
          ctx.lineTo(x + boxWidth, boxY);
          ctx.lineTo(x + boxWidth, boxY + boxHeight);
          ctx.lineTo(x, boxY + boxHeight);
          ctx.closePath();
          ctx.fill();
          ctx.stroke();
          ctx.fillStyle = labelConfig.color || '#ffffff';
          ctx.textBaseline = 'middle';
          ctx.fillText(text, x + padding, boxY + boxHeight / 2);
          ctx.restore();
        }
      });
    }
  };

  global.ChartAnnotation = AnnotationPlugin;
  Chart.register(AnnotationPlugin);
})(window);
